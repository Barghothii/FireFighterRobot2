;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/14/2025 11:07:57 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x293D      	GOTO       317
_turn180:
;TEST12JAN.c,91 :: 		void turn180() {
;TEST12JAN.c,92 :: 		PORTB = PORTB & 0x00;
0x0003	0x3000      	MOVLW      0
0x0004	0x1283      	BCF        STATUS, 5
0x0005	0x1303      	BCF        STATUS, 6
0x0006	0x0586      	ANDWF      PORTB, 1
;TEST12JAN.c,93 :: 		PORTB = PORTB | 0x06; // Set pins for 180-degree turn
0x0007	0x3006      	MOVLW      6
0x0008	0x0486      	IORWF      PORTB, 1
;TEST12JAN.c,94 :: 		}
L_end_turn180:
0x0009	0x0008      	RETURN
; end of _turn180
_turn_left:
;TEST12JAN.c,86 :: 		void turn_left() {
;TEST12JAN.c,87 :: 		PORTB = PORTB & 0x00;
0x000A	0x3000      	MOVLW      0
0x000B	0x1283      	BCF        STATUS, 5
0x000C	0x1303      	BCF        STATUS, 6
0x000D	0x0586      	ANDWF      PORTB, 1
;TEST12JAN.c,88 :: 		PORTB = PORTB | 0x09; // Set pins for turning left
0x000E	0x3009      	MOVLW      9
0x000F	0x0486      	IORWF      PORTB, 1
;TEST12JAN.c,89 :: 		}
L_end_turn_left:
0x0010	0x0008      	RETURN
; end of _turn_left
_ATD_read:
;TEST12JAN.c,35 :: 		unsigned int ATD_read(void){
;TEST12JAN.c,36 :: 		ADCON0 = ADCON0 | 0x04;// GO
0x0011	0x1283      	BCF        STATUS, 5
0x0012	0x1303      	BCF        STATUS, 6
0x0013	0x151F      	BSF        ADCON0, 2
;TEST12JAN.c,37 :: 		while(ADCON0 & 0x04);
L_ATD_read5:
0x0014	0x1D1F      	BTFSS      ADCON0, 2
0x0015	0x2817      	GOTO       L_ATD_read6
0x0016	0x2814      	GOTO       L_ATD_read5
L_ATD_read6:
;TEST12JAN.c,38 :: 		return((ADRESH<<8) | ADRESL);
0x0017	0x081E      	MOVF       ADRESH, 0
0x0018	0x00F1      	MOVWF      R0+1
0x0019	0x01F0      	CLRF       R0
0x001A	0x1683      	BSF        STATUS, 5
0x001B	0x081E      	MOVF       ADRESL, 0
0x001C	0x04F0      	IORWF      R0, 1
0x001D	0x3000      	MOVLW      0
0x001E	0x04F1      	IORWF      R0+1, 1
;TEST12JAN.c,39 :: 		}
L_end_ATD_read:
0x001F	0x0008      	RETURN
; end of _ATD_read
_set_servo_position:
;TEST12JAN.c,57 :: 		void set_servo_position(int degrees) {
;TEST12JAN.c,60 :: 		if (degrees < -90) degrees = -90;   // Minimum angle for the servo
0x0020	0x3080      	MOVLW      128
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x1303      	BCF        STATUS, 6
0x0023	0x0625      	XORWF      FARG_set_servo_position_degrees+1, 0
0x0024	0x00F0      	MOVWF      R0
0x0025	0x307F      	MOVLW      127
0x0026	0x0270      	SUBWF      R0, 0
0x0027	0x1D03      	BTFSS      STATUS, 2
0x0028	0x282B      	GOTO       L__set_servo_position42
0x0029	0x30A6      	MOVLW      166
0x002A	0x0224      	SUBWF      FARG_set_servo_position_degrees, 0
L__set_servo_position42:
0x002B	0x1803      	BTFSC      STATUS, 0
0x002C	0x2831      	GOTO       L_set_servo_position19
0x002D	0x30A6      	MOVLW      166
0x002E	0x00A4      	MOVWF      FARG_set_servo_position_degrees
0x002F	0x30FF      	MOVLW      255
0x0030	0x00A5      	MOVWF      FARG_set_servo_position_degrees+1
L_set_servo_position19:
;TEST12JAN.c,61 :: 		if (degrees > 90) degrees = 90;     // Maximum angle for the servo
0x0031	0x3080      	MOVLW      128
0x0032	0x00F0      	MOVWF      R0
0x0033	0x3080      	MOVLW      128
0x0034	0x0625      	XORWF      FARG_set_servo_position_degrees+1, 0
0x0035	0x0270      	SUBWF      R0, 0
0x0036	0x1D03      	BTFSS      STATUS, 2
0x0037	0x283A      	GOTO       L__set_servo_position43
0x0038	0x0824      	MOVF       FARG_set_servo_position_degrees, 0
0x0039	0x3C5A      	SUBLW      90
L__set_servo_position43:
0x003A	0x1803      	BTFSC      STATUS, 0
0x003B	0x2840      	GOTO       L_set_servo_position20
0x003C	0x305A      	MOVLW      90
0x003D	0x00A4      	MOVWF      FARG_set_servo_position_degrees
0x003E	0x3000      	MOVLW      0
0x003F	0x00A5      	MOVWF      FARG_set_servo_position_degrees+1
L_set_servo_position20:
;TEST12JAN.c,64 :: 		pulse_width = (degrees + 90) * 8 + 500;  // Pulse width calculation for the servo
0x0040	0x305A      	MOVLW      90
0x0041	0x0724      	ADDWF      FARG_set_servo_position_degrees, 0
0x0042	0x00F3      	MOVWF      R3
0x0043	0x0825      	MOVF       FARG_set_servo_position_degrees+1, 0
0x0044	0x1803      	BTFSC      STATUS, 0
0x0045	0x3E01      	ADDLW      1
0x0046	0x00F4      	MOVWF      R3+1
0x0047	0x3003      	MOVLW      3
0x0048	0x00F2      	MOVWF      R2
0x0049	0x0873      	MOVF       R3, 0
0x004A	0x00F0      	MOVWF      R0
0x004B	0x0874      	MOVF       R3+1, 0
0x004C	0x00F1      	MOVWF      R0+1
0x004D	0x0872      	MOVF       R2, 0
L__set_servo_position44:
0x004E	0x1903      	BTFSC      STATUS, 2
0x004F	0x2855      	GOTO       L__set_servo_position45
0x0050	0x0DF0      	RLF        R0, 1
0x0051	0x0DF1      	RLF        R0+1, 1
0x0052	0x1070      	BCF        R0, 0
0x0053	0x3EFF      	ADDLW      255
0x0054	0x284E      	GOTO       L__set_servo_position44
L__set_servo_position45:
0x0055	0x30F4      	MOVLW      244
0x0056	0x0770      	ADDWF      R0, 0
0x0057	0x00F3      	MOVWF      R3
0x0058	0x0871      	MOVF       R0+1, 0
0x0059	0x1803      	BTFSC      STATUS, 0
0x005A	0x3E01      	ADDLW      1
0x005B	0x3E01      	ADDLW      1
0x005C	0x00F4      	MOVWF      R3+1
;TEST12JAN.c,66 :: 		CCPR1L = pulse_width >> 2;  // Set the high byte (most significant bits) for the pulse width
0x005D	0x0873      	MOVF       R3, 0
0x005E	0x00F0      	MOVWF      R0
0x005F	0x0874      	MOVF       R3+1, 0
0x0060	0x00F1      	MOVWF      R0+1
0x0061	0x0CF1      	RRF        R0+1, 1
0x0062	0x0CF0      	RRF        R0, 1
0x0063	0x13F1      	BCF        R0+1, 7
0x0064	0x1B71      	BTFSC      R0+1, 6
0x0065	0x17F1      	BSF        R0+1, 7
0x0066	0x0CF1      	RRF        R0+1, 1
0x0067	0x0CF0      	RRF        R0, 1
0x0068	0x13F1      	BCF        R0+1, 7
0x0069	0x1B71      	BTFSC      R0+1, 6
0x006A	0x17F1      	BSF        R0+1, 7
0x006B	0x0870      	MOVF       R0, 0
0x006C	0x0095      	MOVWF      CCPR1L
;TEST12JAN.c,67 :: 		CCP1CON = (CCP1CON & 0xCF) | ((pulse_width & 0x03) << 4);  // Set the low byte (least significant bits) for the pulse width
0x006D	0x30CF      	MOVLW      207
0x006E	0x0517      	ANDWF      CCP1CON, 0
0x006F	0x00F5      	MOVWF      R5
0x0070	0x3003      	MOVLW      3
0x0071	0x0573      	ANDWF      R3, 0
0x0072	0x00F2      	MOVWF      R2
0x0073	0x0872      	MOVF       R2, 0
0x0074	0x00F0      	MOVWF      R0
0x0075	0x0DF0      	RLF        R0, 1
0x0076	0x1070      	BCF        R0, 0
0x0077	0x0DF0      	RLF        R0, 1
0x0078	0x1070      	BCF        R0, 0
0x0079	0x0DF0      	RLF        R0, 1
0x007A	0x1070      	BCF        R0, 0
0x007B	0x0DF0      	RLF        R0, 1
0x007C	0x1070      	BCF        R0, 0
0x007D	0x0870      	MOVF       R0, 0
0x007E	0x0475      	IORWF      R5, 0
0x007F	0x0097      	MOVWF      CCP1CON
;TEST12JAN.c,68 :: 		}
L_end_set_servo_position:
0x0080	0x0008      	RETURN
; end of _set_servo_position
_stop:
;TEST12JAN.c,96 :: 		void stop() {
;TEST12JAN.c,97 :: 		PORTB = 0x00; // Stop movement
0x0081	0x1283      	BCF        STATUS, 5
0x0082	0x1303      	BCF        STATUS, 6
0x0083	0x0186      	CLRF       PORTB
;TEST12JAN.c,98 :: 		}
L_end_stop:
0x0084	0x0008      	RETURN
; end of _stop
_msDelay:
;TEST12JAN.c,40 :: 		void msDelay(unsigned int mscnt) {
;TEST12JAN.c,43 :: 		for (ms = 0; ms < mscnt; ms++) {
0x0085	0x1283      	BCF        STATUS, 5
0x0086	0x1303      	BCF        STATUS, 6
0x0087	0x01F1      	CLRF       R1
0x0088	0x01F2      	CLRF       R1+1
L_msDelay7:
0x0089	0x0825      	MOVF       FARG_msDelay_mscnt+1, 0
0x008A	0x0272      	SUBWF      R1+1, 0
0x008B	0x1D03      	BTFSS      STATUS, 2
0x008C	0x288F      	GOTO       L__msDelay37
0x008D	0x0824      	MOVF       FARG_msDelay_mscnt, 0
0x008E	0x0271      	SUBWF      R1, 0
L__msDelay37:
0x008F	0x1803      	BTFSC      STATUS, 0
0x0090	0x28A3      	GOTO       L_msDelay8
;TEST12JAN.c,44 :: 		for (cnt = 0; cnt < 155; cnt++);
0x0091	0x01F3      	CLRF       R3
0x0092	0x01F4      	CLRF       R3+1
L_msDelay10:
0x0093	0x3000      	MOVLW      0
0x0094	0x0274      	SUBWF      R3+1, 0
0x0095	0x1D03      	BTFSS      STATUS, 2
0x0096	0x2899      	GOTO       L__msDelay38
0x0097	0x309B      	MOVLW      155
0x0098	0x0273      	SUBWF      R3, 0
L__msDelay38:
0x0099	0x1803      	BTFSC      STATUS, 0
0x009A	0x289F      	GOTO       L_msDelay11
0x009B	0x0AF3      	INCF       R3, 1
0x009C	0x1903      	BTFSC      STATUS, 2
0x009D	0x0AF4      	INCF       R3+1, 1
0x009E	0x2893      	GOTO       L_msDelay10
L_msDelay11:
;TEST12JAN.c,43 :: 		for (ms = 0; ms < mscnt; ms++) {
0x009F	0x0AF1      	INCF       R1, 1
0x00A0	0x1903      	BTFSC      STATUS, 2
0x00A1	0x0AF2      	INCF       R1+1, 1
;TEST12JAN.c,45 :: 		}
0x00A2	0x2889      	GOTO       L_msDelay7
L_msDelay8:
;TEST12JAN.c,46 :: 		}
L_end_msDelay:
0x00A3	0x0008      	RETURN
; end of _msDelay
_turn_right:
;TEST12JAN.c,81 :: 		void turn_right() {
;TEST12JAN.c,82 :: 		PORTB = PORTB & 0x00;
0x00A4	0x3000      	MOVLW      0
0x00A5	0x1283      	BCF        STATUS, 5
0x00A6	0x1303      	BCF        STATUS, 6
0x00A7	0x0586      	ANDWF      PORTB, 1
;TEST12JAN.c,83 :: 		PORTB = PORTB | 0x06; // Set pins for turning right
0x00A8	0x3006      	MOVLW      6
0x00A9	0x0486      	IORWF      PORTB, 1
;TEST12JAN.c,84 :: 		}
L_end_turn_right:
0x00AA	0x0008      	RETURN
; end of _turn_right
_scan:
;TEST12JAN.c,110 :: 		void scan() {
;TEST12JAN.c,111 :: 		while(1){
L_scan21:
;TEST12JAN.c,112 :: 		unsigned int analog_value = ATD_read();
0x00AB	0x2011      	CALL       _ATD_read
0x00AC	0x0870      	MOVF       R0, 0
0x00AD	0x1283      	BCF        STATUS, 5
0x00AE	0x00A2      	MOVWF      scan_analog_value_L1
0x00AF	0x0871      	MOVF       R0+1, 0
0x00B0	0x00A3      	MOVWF      scan_analog_value_L1+1
;TEST12JAN.c,113 :: 		if ((PORTD & 0x01) == 0) {
0x00B1	0x3001      	MOVLW      1
0x00B2	0x0508      	ANDWF      PORTD, 0
0x00B3	0x00F1      	MOVWF      R1
0x00B4	0x0871      	MOVF       R1, 0
0x00B5	0x3A00      	XORLW      0
0x00B6	0x1D03      	BTFSS      STATUS, 2
0x00B7	0x28C0      	GOTO       L_scan23
;TEST12JAN.c,114 :: 		turn_right(); // Turn right
0x00B8	0x20A4      	CALL       _turn_right
;TEST12JAN.c,115 :: 		msDelay(300); // Delay for turning
0x00B9	0x302C      	MOVLW      44
0x00BA	0x00A4      	MOVWF      FARG_msDelay_mscnt
0x00BB	0x3001      	MOVLW      1
0x00BC	0x00A5      	MOVWF      FARG_msDelay_mscnt+1
0x00BD	0x2085      	CALL       _msDelay
;TEST12JAN.c,116 :: 		stop();
0x00BE	0x2081      	CALL       _stop
;TEST12JAN.c,117 :: 		continue;       // Stop movement
0x00BF	0x28AB      	GOTO       L_scan21
;TEST12JAN.c,118 :: 		}
L_scan23:
;TEST12JAN.c,119 :: 		if  ((PORTD & 0x08) == 0) {
0x00C0	0x3008      	MOVLW      8
0x00C1	0x0508      	ANDWF      PORTD, 0
0x00C2	0x00F1      	MOVWF      R1
0x00C3	0x0871      	MOVF       R1, 0
0x00C4	0x3A00      	XORLW      0
0x00C5	0x1D03      	BTFSS      STATUS, 2
0x00C6	0x28CF      	GOTO       L_scan24
;TEST12JAN.c,120 :: 		turn_left();
0x00C7	0x200A      	CALL       _turn_left
;TEST12JAN.c,121 :: 		msDelay(300);
0x00C8	0x302C      	MOVLW      44
0x00C9	0x00A4      	MOVWF      FARG_msDelay_mscnt
0x00CA	0x3001      	MOVLW      1
0x00CB	0x00A5      	MOVWF      FARG_msDelay_mscnt+1
0x00CC	0x2085      	CALL       _msDelay
;TEST12JAN.c,122 :: 		stop();
0x00CD	0x2081      	CALL       _stop
;TEST12JAN.c,123 :: 		continue;
0x00CE	0x28AB      	GOTO       L_scan21
;TEST12JAN.c,124 :: 		}
L_scan24:
;TEST12JAN.c,125 :: 		if ((PORTD & 0x04) == 0) {
0x00CF	0x3004      	MOVLW      4
0x00D0	0x0508      	ANDWF      PORTD, 0
0x00D1	0x00F1      	MOVWF      R1
0x00D2	0x0871      	MOVF       R1, 0
0x00D3	0x3A00      	XORLW      0
0x00D4	0x1D03      	BTFSS      STATUS, 2
0x00D5	0x28DE      	GOTO       L_scan25
;TEST12JAN.c,126 :: 		turn180();    // Turn 180 degrees
0x00D6	0x2003      	CALL       _turn180
;TEST12JAN.c,127 :: 		msDelay(500); // Delay for turning
0x00D7	0x30F4      	MOVLW      244
0x00D8	0x00A4      	MOVWF      FARG_msDelay_mscnt
0x00D9	0x3001      	MOVLW      1
0x00DA	0x00A5      	MOVWF      FARG_msDelay_mscnt+1
0x00DB	0x2085      	CALL       _msDelay
;TEST12JAN.c,128 :: 		stop();       // Stop movement
0x00DC	0x2081      	CALL       _stop
;TEST12JAN.c,129 :: 		continue;     // Continue scanning
0x00DD	0x28AB      	GOTO       L_scan21
;TEST12JAN.c,130 :: 		}
L_scan25:
;TEST12JAN.c,131 :: 		if (analog_value < 300) { // Assuming a threshold value of 512 for flame detection
0x00DE	0x3001      	MOVLW      1
0x00DF	0x0223      	SUBWF      scan_analog_value_L1+1, 0
0x00E0	0x1D03      	BTFSS      STATUS, 2
0x00E1	0x28E4      	GOTO       L__scan54
0x00E2	0x302C      	MOVLW      44
0x00E3	0x0222      	SUBWF      scan_analog_value_L1, 0
L__scan54:
0x00E4	0x1803      	BTFSC      STATUS, 0
0x00E5	0x290D      	GOTO       L_scan26
;TEST12JAN.c,133 :: 		set_servo_position(70);  // Set the servo position to -25 degrees (left)
0x00E6	0x3046      	MOVLW      70
0x00E7	0x00A4      	MOVWF      FARG_set_servo_position_degrees
0x00E8	0x3000      	MOVLW      0
0x00E9	0x00A5      	MOVWF      FARG_set_servo_position_degrees+1
0x00EA	0x2020      	CALL       _set_servo_position
;TEST12JAN.c,134 :: 		Delay_ms(750);  // Wait for 1000ms (1 second) to allow the servo to reach the position
0x00EB	0x3008      	MOVLW      8
0x00EC	0x00FB      	MOVWF      R11
0x00ED	0x309D      	MOVLW      157
0x00EE	0x00FC      	MOVWF      R12
0x00EF	0x3005      	MOVLW      5
0x00F0	0x00FD      	MOVWF      R13
L_scan27:
0x00F1	0x0BFD      	DECFSZ     R13, 1
0x00F2	0x28F1      	GOTO       L_scan27
0x00F3	0x0BFC      	DECFSZ     R12, 1
0x00F4	0x28F1      	GOTO       L_scan27
0x00F5	0x0BFB      	DECFSZ     R11, 1
0x00F6	0x28F1      	GOTO       L_scan27
0x00F7	0x0000      	NOP
0x00F8	0x0000      	NOP
;TEST12JAN.c,137 :: 		set_servo_position(30);   // Set the servo position to 25 degrees (right)
0x00F9	0x301E      	MOVLW      30
0x00FA	0x00A4      	MOVWF      FARG_set_servo_position_degrees
0x00FB	0x3000      	MOVLW      0
0x00FC	0x00A5      	MOVWF      FARG_set_servo_position_degrees+1
0x00FD	0x2020      	CALL       _set_servo_position
;TEST12JAN.c,138 :: 		Delay_ms(750);  // Wait for 1000ms (1 second) to allow the servo to reach the position
0x00FE	0x3008      	MOVLW      8
0x00FF	0x00FB      	MOVWF      R11
0x0100	0x309D      	MOVLW      157
0x0101	0x00FC      	MOVWF      R12
0x0102	0x3005      	MOVLW      5
0x0103	0x00FD      	MOVWF      R13
L_scan28:
0x0104	0x0BFD      	DECFSZ     R13, 1
0x0105	0x2904      	GOTO       L_scan28
0x0106	0x0BFC      	DECFSZ     R12, 1
0x0107	0x2904      	GOTO       L_scan28
0x0108	0x0BFB      	DECFSZ     R11, 1
0x0109	0x2904      	GOTO       L_scan28
0x010A	0x0000      	NOP
0x010B	0x0000      	NOP
;TEST12JAN.c,139 :: 		continue;
0x010C	0x28AB      	GOTO       L_scan21
;TEST12JAN.c,140 :: 		}
L_scan26:
;TEST12JAN.c,141 :: 		}}
0x010D	0x28AB      	GOTO       L_scan21
L_end_scan:
0x010E	0x0008      	RETURN
; end of _scan
_ATD_init:
;TEST12JAN.c,31 :: 		void ATD_init(void){
;TEST12JAN.c,32 :: 		ADCON0 = 0x41;// ATD ON, Don't GO, Channel 1, Fosc/16
0x010F	0x3041      	MOVLW      65
0x0110	0x1283      	BCF        STATUS, 5
0x0111	0x1303      	BCF        STATUS, 6
0x0112	0x009F      	MOVWF      ADCON0
;TEST12JAN.c,33 :: 		ADCON1 = 0xCE;// All channels Analog, 500 KHz, right justified
0x0113	0x30CE      	MOVLW      206
0x0114	0x1683      	BSF        STATUS, 5
0x0115	0x009F      	MOVWF      ADCON1
;TEST12JAN.c,34 :: 		}
L_end_ATD_init:
0x0116	0x0008      	RETURN
; end of _ATD_init
_Initialize:
;TEST12JAN.c,69 :: 		void Initialize() {
;TEST12JAN.c,71 :: 		TRISB = 0x00; // Configure PORTB as output
0x0117	0x1683      	BSF        STATUS, 5
0x0118	0x1303      	BCF        STATUS, 6
0x0119	0x0186      	CLRF       TRISB
;TEST12JAN.c,72 :: 		PORTB = 0x00; // Initialize PORTB to 0
0x011A	0x1283      	BCF        STATUS, 5
0x011B	0x0186      	CLRF       PORTB
;TEST12JAN.c,73 :: 		TRISC = 0x00; // Configure PORTC as input
0x011C	0x1683      	BSF        STATUS, 5
0x011D	0x0187      	CLRF       TRISC
;TEST12JAN.c,74 :: 		PORTC = 0x00; // Enable pull-up resistors for PORTC
0x011E	0x1283      	BCF        STATUS, 5
0x011F	0x0187      	CLRF       PORTC
;TEST12JAN.c,75 :: 		TRISD = 0xFF;
0x0120	0x30FF      	MOVLW      255
0x0121	0x1683      	BSF        STATUS, 5
0x0122	0x0088      	MOVWF      TRISD
;TEST12JAN.c,76 :: 		PORTD = 0xFF;
0x0123	0x30FF      	MOVLW      255
0x0124	0x1283      	BCF        STATUS, 5
0x0125	0x0088      	MOVWF      PORTD
;TEST12JAN.c,77 :: 		ADCON0 = 0x01;
0x0126	0x3001      	MOVLW      1
0x0127	0x009F      	MOVWF      ADCON0
;TEST12JAN.c,78 :: 		ADCON1 = 0x0E;
0x0128	0x300E      	MOVLW      14
0x0129	0x1683      	BSF        STATUS, 5
0x012A	0x009F      	MOVWF      ADCON1
;TEST12JAN.c,79 :: 		}
L_end_Initialize:
0x012B	0x0008      	RETURN
; end of _Initialize
_pwm_init:
;TEST12JAN.c,9 :: 		void pwm_init() {
;TEST12JAN.c,10 :: 		TRISC2_bit = 0; // Set RC2 pin as output
0x012C	0x1683      	BSF        STATUS, 5
0x012D	0x1303      	BCF        STATUS, 6
0x012E	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;TEST12JAN.c,11 :: 		CCP1M3_bit = 1; // Configure CCP1 module for PWM
0x012F	0x1283      	BCF        STATUS, 5
0x0130	0x1597      	BSF        CCP1M3_bit, BitPos(CCP1M3_bit+0)
;TEST12JAN.c,12 :: 		CCP1M2_bit = 1;
0x0131	0x1517      	BSF        CCP1M2_bit, BitPos(CCP1M2_bit+0)
;TEST12JAN.c,13 :: 		CCP1M1_bit = 0;
0x0132	0x1097      	BCF        CCP1M1_bit, BitPos(CCP1M1_bit+0)
;TEST12JAN.c,14 :: 		CCP1M0_bit = 0;
0x0133	0x1017      	BCF        CCP1M0_bit, BitPos(CCP1M0_bit+0)
;TEST12JAN.c,15 :: 		CCP1X_bit = 0;
0x0134	0x1297      	BCF        CCP1X_bit, BitPos(CCP1X_bit+0)
;TEST12JAN.c,16 :: 		CCP1Y_bit = 0;
0x0135	0x1217      	BCF        CCP1Y_bit, BitPos(CCP1Y_bit+0)
;TEST12JAN.c,17 :: 		T2CKPS0_bit = 1; // Set Timer2 prescaler to 16
0x0136	0x1412      	BSF        T2CKPS0_bit, BitPos(T2CKPS0_bit+0)
;TEST12JAN.c,18 :: 		T2CKPS1_bit = 1;
0x0137	0x1492      	BSF        T2CKPS1_bit, BitPos(T2CKPS1_bit+0)
;TEST12JAN.c,19 :: 		TMR2ON_bit = 1; // Enable Timer2
0x0138	0x1512      	BSF        TMR2ON_bit, BitPos(TMR2ON_bit+0)
;TEST12JAN.c,20 :: 		PR2 = 249; // Set period register for 50Hz frequency (20ms period)
0x0139	0x30F9      	MOVLW      249
0x013A	0x1683      	BSF        STATUS, 5
0x013B	0x0092      	MOVWF      PR2
;TEST12JAN.c,21 :: 		}
L_end_pwm_init:
0x013C	0x0008      	RETURN
; end of _pwm_init
_main:
;TEST12JAN.c,142 :: 		void main() {
;TEST12JAN.c,143 :: 		pwm_init(); // Initialize PWM module
0x013D	0x212C      	CALL       _pwm_init
;TEST12JAN.c,144 :: 		Initialize(); // Initialize ports
0x013E	0x2117      	CALL       _Initialize
;TEST12JAN.c,145 :: 		ATD_init(void);
0x013F	0x210F      	CALL       _ATD_init
;TEST12JAN.c,146 :: 		while(1){
L_main29:
;TEST12JAN.c,147 :: 		scan();}
0x0140	0x20AB      	CALL       _scan
0x0141	0x2940      	GOTO       L_main29
;TEST12JAN.c,148 :: 		}
L_end_main:
0x0142	0x2942      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003       [7]    _turn180
0x000A       [7]    _turn_left
0x0011      [15]    _ATD_read
0x0020      [97]    _set_servo_position
0x0081       [4]    _stop
0x0085      [31]    _msDelay
0x00A4       [7]    _turn_right
0x00AB     [100]    _scan
0x010F       [8]    _ATD_init
0x0117      [21]    _Initialize
0x012C      [17]    _pwm_init
0x013D       [6]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x0012       [0]    TMR2ON_bit
0x0012       [0]    T2CKPS1_bit
0x0012       [0]    T2CKPS0_bit
0x0015       [1]    CCPR1L
0x0017       [0]    CCP1M3_bit
0x0017       [0]    CCP1M1_bit
0x0017       [0]    CCP1M2_bit
0x0017       [0]    CCP1X_bit
0x0017       [1]    CCP1CON
0x0017       [0]    CCP1M0_bit
0x0017       [0]    CCP1Y_bit
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0020       [2]    ___DoICPAddr
0x0022       [2]    scan_analog_value_L1
0x0024       [2]    FARG_set_servo_position_degrees
0x0024       [2]    FARG_msDelay_mscnt
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0087       [0]    TRISC2_bit
0x0088       [1]    TRISD
0x0092       [1]    PR2
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
